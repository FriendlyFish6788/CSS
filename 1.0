#The Code to find Cyclic Sum Sets given the order of n

#Necessary Imports for code
import itertools
import timeit

#The start of a timer for problem number 16
start = timeit.default_timer()

#Getting order for N and number of Terms
N = int(input("enter order of CSS: "))
n = N*N + N + 1
terms = N + 1
potentCSS = set()
permUnsort = []
permUnsortbig = []
permList = []
cssList = []
notUniq = []
potUniq = []
Uniq = []
#Code borrowed from Jerome Kelleher to generate partitions efficiently
def accelAsc(n):
    a = [0 for i in range(n + 1)]
    k = 1
    y = n - 1
    while k != 0:
        x = a[k - 1] + 1
        k -= 1
        while 2*x <= y:
            a[k] = x
            y -= x
            k += 1
        l = k + 1
        while x <= y:
            a[k] = x
            a[l] = y
            yield a[:k + 2]
            x += 1
            y -= 1
        a[k] = x + y
        y = x + y - 1
        yield a[:k + 1]
part = accelAsc(n)



#Checking through the partitions to check the CSS properties
#and i not in potentCSS
#create these lists but appending next numbers??

for i in part:
    if (len(i) == terms) and (1 in i) and (2 in i):
        potentCSS.add(tuple(sorted(i)))
potCSS = list(potentCSS)

#Checking for Duplicates
filtered = potCSS[:]

for x in filtered:
    seen = []
    for i in x:
        if i in seen:
            if x in filtered:
                filtered.remove(x)
                break
        seen.append(i)
filtPotCSS = filtered

#print(filtPotCSS)

#Permutating the Duplicates
for i in filtPotCSS:
    permUnsortbig.append(list(itertools.permutations(i, len(i))))
    #print(permUnsortbig)
#print("break")
#print(permUnsortbig)
permUnsort = permUnsortbig[:]
#print(permUnsort)
#print(len(permUnsort))
#while q < len(permUnsort)-1:
#print("break1.5")
#print(permUnsort)
#aa = permUnsort[0][0][0]
#print(aa)

q = 0
for x in permUnsort:
   # q = 0
    for y in x:
        q = 0
        #while q <= len(y)-1:
            #print("break")
            #print(len(y))
        if y[0] == 1:
                #print("True")
            permList.append(y)
            #q += 1

permList2 = []
permList2.append(permList)
perms = permList2

#Code that checks for CSS property. Borrowed from zdobrenen
def isCSS(L):
    seen = []
    n = len(L)
    for i in range(1,n):
        for start in range(0,n):
            Sum = 0
            for j in range(0,i):
                Sum = Sum + L[(start + j)%n]
            if Sum in seen:
                return False
            seen.append(Sum)
    return True

#Checks the potential orientations for if they are a CSS

for listPerms in perms:
    for j in listPerms:
        if isCSS(j) == True:
            css = []
            css.append(j)
            notUniq.append(css)

#This gives nonuniqes

aa = 1
bb = len(notUniq)
potUniq = []
#Prints out the final CSS

for x in notUniq:
    if x[0][1:bb] and x[0][bb:0:-1] not in potUniq or not Uniq:
        potUniq.append(x[0][bb:0: -1])
        potUniq.append(x[0][1:bb])
        Uniq.append(x)
#
p = 1
for i in Uniq:
    print("CSS of order " + str(N) + " number " + str(p), i)
    int(p)
    p += 1
stop = timeit.default_timer()
print(stop - start)

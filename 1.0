import itertools
import timeit

N = int(input("enter order of CSS: "))
n = N*N + N + 1
terms = N + 1

start = timeit.default_timer()


def accelAsc(n):
    a = [0 for i in range(n + 1)]
    k = 1
    y = n - 1
    while k != 0:
        x = a[k - 1] + 1
        k -= 1
        while 2*x <= y:
            a[k] = x
            y -= x
            k += 1
        l = k + 1
        while x <= y:
            a[k] = x
            a[l] = y
            yield a[:k + 2]
            x += 1
            y -= 1
        a[k] = x + y
        y = x + y - 1
        yield a[:k + 1]

def NumDup(n):
    noDups = []
    for i in n:
        if len(list(set(i))) == terms:
            noDups.append(i)
    yield noDups


def isCSS(L):
    seen = []
    n = len(L)
    pos1 = L[1]
    shortSum = pos1 + 1
    if shortSum in L:
        #print(L)
        return False
    for i in range(1,n):
        for start in range(0,n):
            Sum = 0
            for j in range(0,i):
                #print("L: ", L)
                #print("i: ", i)
                #print("start: ", start)
                #print("j: ", j)
                #test = L[(start + j)%n]
                #print("L[(start + j)%n] :", test)
                Sum = Sum + L[(start + j)%n]
                #print("Sum: ", Sum)
            if Sum != 1:
                if Sum in (seen or L):
                    return False
            seen.append(Sum)
    return True

def UniqCSS(n):
    notUniq = []
    #n = filtCopy(n)
    for i in n:
        for j in i:
            if j[0] != 1:
                break
            #print(j)
            if isCSS(j) == True:
                css = []
                css.append(j)
                notUniq.append(css)
    b = terms
    potUniq = []
    Uniq = []
    for x in notUniq:
        c = x[0][1:b]
        d = x[0][b:0:-1]
        if c and d not in (potUniq or Uniq):
            potUniq.append(c)
            potUniq.append(d)
            Uniq.append(x)
    return Uniq






def it(n):
    for i in n:
        yield list(itertools.permutations(i, len(i)))




possWithDups = []
possNoDups = []
perms = accelAsc(n)

#print("Potentials")
for i in perms:
    if i[0] != 1:
        break
    if (len(i) == terms) and (2 in i) and (len(list(set(i))) == terms):
        possWithDups.append(i)
        #print(i)


print("Part 1 done!")
genPerm = it(possWithDups)
preFinal = []
mid = []
finalCSS = []
for i in genPerm:
    #print(i)
    preFinal.append(i)
    mid = UniqCSS(preFinal)
    if len(mid) != 0:
        finalCSS.append(mid)
    preFinal = []


print("CSS:")
for i in finalCSS:
    for k in i:
        print(k[0])
print("Part 2 done!")
stop = timeit.default_timer()
print(stop - start)
